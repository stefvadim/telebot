import asyncio
from datetime import datetime, timedelta
from collections import defaultdict

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)


TOKEN = "7854667217:AAEpFQNVBPR_E-eFVy_I6dVXXmVOzs7bitg"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {chat_id: {user_id: join_time}}
join_times = defaultdict(dict)

# –†–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π {chat_id: {user_id: count}}
rating = defaultdict(lambda: defaultdict(int))

# –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏ {chat_id: [(user_id, score), ...]}
last_week_winners = defaultdict(list)


async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ + –∑–∞–ø—Ä–µ—Ç –Ω–∞ –º–µ–¥–∏–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞
    for member in update.message.new_chat_members:
        chat_id = update.effective_chat.id
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        msg = await update.effective_chat.send_message(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "–í –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML"
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await msg.delete()


async def check_media_restriction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if user_id in join_times[chat_id]:
        join_time = join_times[chat_id][user_id]
        now = datetime.utcnow()

        if now - join_time < timedelta(hours=24):
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (
                update.message.photo
                or update.message.video
                or (update.message.entities and any(e.type in ["url", "text_link"] for e in update.message.entities))
            ):
                try:
                    await update.message.delete()
                    await update.effective_chat.send_message(
                        f"{user.mention_html()}, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞!",
                        parse_mode="HTML",
                        reply_to_message_id=update.message.message_id,
                    )
                except:
                    pass
                return


async def count_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    rating[chat_id][user_id] += 1


async def weekly_awards(context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    bot = context.bot
    for chat_id, users_scores in rating.items():
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        sorted_scores = sorted(users_scores.items(), key=lambda x: x[1], reverse=True)
        last_week_winners[chat_id] = sorted_scores[:5]  # —Ç–æ–ø 5

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        for i, (user_id, score) in enumerate(last_week_winners[chat_id]):
            try:
                user = await bot.get_chat_member(chat_id, user_id)
                name = user.user.full_name
            except:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        msg = await bot.send_message(chat_id, text, parse_mode="HTML")
        await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating[chat_id].clear()


async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")


async def start_bot():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞
    app.add_handler(MessageHandler(filters.ALL & (~filters.StatusUpdate.NEW_CHAT_MEMBERS), check_media_restriction))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.StatusUpdate.NEW_CHAT_MEMBERS), count_message))

    app.add_handler(CommandHandler("id", cmd_id))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[app.job_queue])
    scheduler.start()

    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(start_bot())
