import os
import json
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.getenv("BOT_TOKEN")
SCORE_FILE = "scores.json"
NEW_USER_TIMEOUT_HOURS = 24
GROUP_ID = -1001234567890  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

scores = {}
if os.path.exists(SCORE_FILE):
    with open(SCORE_FILE, "r", encoding="utf-8") as f:
        scores = json.load(f)

def save_scores():
    with open(SCORE_FILE, "w", encoding="utf-8") as f:
        json.dump(scores, f)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id: datetime)
new_users = {}

pinned_message_id = None

async def welcome_and_restrict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    for member in update.message.new_chat_members:
        user_id = member.id
        now = datetime.utcnow()
        new_users[user_id] = now

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞
        permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=False,
            can_send_polls=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False,
        )
        try:
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=user_id,
                permissions=permissions,
                until_date=now + timedelta(hours=NEW_USER_TIMEOUT_HOURS)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}! "
            f"–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )

        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            await welcome_msg.delete()
        except Exception:
            pass  # –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ

async def check_and_restrict_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–µ—Ç –Ω–∞ –º–µ–¥–∏–∞/—Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞"""
    user = update.message.from_user
    user_id = user.id
    chat_id = update.effective_chat.id

    if user_id in new_users:
        joined_at = new_users[user_id]
        now = datetime.utcnow()
        if now - joined_at < timedelta(hours=NEW_USER_TIMEOUT_HOURS):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if (
                update.message.photo or
                update.message.video or
                update.message.document or
                update.message.audio or
                update.message.voice or
                update.message.video_note or
                update.message.animation or
                (update.message.entities and any(e.type in ["url", "text_link"] for e in update.message.entities))
            ):
                try:
                    await update.message.delete()
                    warning = await update.message.reply_text(
                        f"{user.full_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è."
                    )
                    await asyncio.sleep(5)
                    await warning.delete()
                except Exception:
                    pass
                return  # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –¥–∞–ª—å—à–µ –Ω–µ —Å—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–æ–≤—ã–π ‚Äî —Å—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã
    await handle_message(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = str(user.id)
    if user_id not in scores:
        scores[user_id] = {"name": user.full_name, "score": 0}
    scores[user_id]["name"] = user.full_name
    scores[user_id]["score"] += 1
    save_scores()

async def top_scores(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not scores:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç.")
        return
    sorted_users = sorted(scores.items(), key=lambda x: x[1]["score"], reverse=True)
    text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:10], 1):
        text += f"{i}. {data['name']} ‚Äî {data['score']} –±–∞–ª–ª–æ–≤\n"
    await update.message.reply_text(text)

async def reset_weekly_scores(app):
    global scores, pinned_message_id
    if not scores:
        return
    sorted_users = sorted(scores.items(), key=lambda x: x[1]["score"], reverse=True)
    text = "üèÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:\n\n"
    titles = ["ü•á –ó–≤–µ–∑–¥–∞ –Ω–µ–¥–µ–ª–∏", "ü•à –ê–∫—Ç–∏–≤–∏—Å—Ç", "ü•â –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏"]
    for i, (user_id, data) in enumerate(sorted_users[:3], 0):
        text += f"{titles[i]} ‚Äî {data['name']} ({data['score']} –±–∞–ª–ª–æ–≤)\n"
    text += "\n–†–µ–π—Ç–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é!"

    try:
        msg = await app.bot.send_message(chat_id=GROUP_ID, text=text)
        if pinned_message_id:
            try:
                await app.bot.unpin_chat_message(chat_id=GROUP_ID, message_id=pinned_message_id)
            except Exception:
                pass
        await app.bot.pin_chat_message(chat_id=GROUP_ID, message_id=msg.message_id)
        pinned_message_id = msg.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    scores = {}
    save_scores()
    # –û—á–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç.–∫. —Ä–µ–π—Ç–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω)
    new_users.clear()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–±–∏—Ä–∞–π –±–∞–ª–ª—ã!")

async def chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat.id}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("top", top_scores))
    app.add_handler(CommandHandler("id", chat_id))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_and_restrict))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–µ–¥–∏–∞ —É –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    app.add_handler(MessageHandler(filters.ALL & (~filters.COMMAND), check_and_restrict_media))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: app.create_task(reset_weekly_scores(app)),
                      trigger="cron", day_of_week="sat", hour=23, minute=59)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
