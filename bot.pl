import os
import json
from collections import defaultdict
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("BOT_TOKEN")

# –§–∞–π–ª —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
SCORE_FILE = "scores.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–ª—ã –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(SCORE_FILE):
    with open(SCORE_FILE, "r", encoding="utf-8") as f:
        scores = json.load(f)
else:
    scores = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ —Ñ–∞–π–ª
def save_scores():
    with open(SCORE_FILE, "w", encoding="utf-8") as f:
        json.dump(scores, f)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = str(user.id)

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in scores:
        scores[user_id] = {"name": user.full_name, "score": 0}

    scores[user_id]["name"] = user.full_name  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    scores[user_id]["score"] += 1
    save_scores()

# –ö–æ–º–∞–Ω–¥–∞ /—Ç–æ–ø
async def top_scores(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sorted_users = sorted(scores.items(), key=lambda x: x[1]["score"], reverse=True)
    top_text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"

    for i, (user_id, data) in enumerate(sorted_users[:10], 1):
        top_text += f"{i}. {data['name']} ‚Äî {data['score']} –±–∞–ª–ª–æ–≤\n"

    await update.message.reply_text(top_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("—Ç–æ–ø", top_scores))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
