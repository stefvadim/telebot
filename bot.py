import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict, deque

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

app = FastAPI()
telegram_app = ApplicationBuilder().token(TOKEN).build()

join_times = defaultdict(dict)  # chat_id -> user_id -> join datetime
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> message count
message_times = defaultdict(lambda: defaultdict(deque))  # chat_id -> user_id -> deque for spam timestamps
muted_users = defaultdict(set)  # chat_id -> set of muted user_ids

SPAM_LIMIT = 3
SPAM_INTERVAL = 60
MUTE_TIME = 3600  # 1 hour in seconds


async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        chat_id = update.effective_chat.id
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "–í –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML",
        )
        await asyncio.sleep(10)
        try:
            await msg.delete()
        except Exception:
            pass


async def check_media_restriction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    if user_id not in join_times[chat_id]:
        return

    if datetime.utcnow() - join_times[chat_id][user_id] < timedelta(hours=24):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–æ–∫
        if (
            msg.photo
            or msg.video
            or any(ent.type in ["url", "text_link"] for ent in (msg.entities or []))
        ):
            try:
                await msg.delete()
                await update.effective_chat.send_message(
                    f"{user.mention_html()}, –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏!",
                    parse_mode="HTML",
                    reply_to_message_id=msg.message_id,
                )
            except Exception:
                pass


async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or (msg.text and msg.text.startswith("/")):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        is_admin = member.status in ("administrator", "creator")
    except Exception:
        is_admin = False

    if is_admin:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await check_media_restriction(update, context)

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    now = datetime.utcnow()
    times = message_times[chat_id][user_id]
    while times and (now - times[0]).total_seconds() > SPAM_INTERVAL:
        times.popleft()
    times.append(now)

    if len(times) > SPAM_LIMIT:
        try:
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=now + timedelta(seconds=MUTE_TIME),
            )
            muted_users[chat_id].add(user_id)
            warn = await update.effective_chat.send_message(
                f"{user.mention_html()}, –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ 1 —á–∞—Å.",
                parse_mode="HTML",
            )
            await asyncio.sleep(10)
            await warn.delete()
        except Exception:
            pass
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    if user_id in muted_users[chat_id]:
        return

    # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating[chat_id][user_id] += 1


async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        if not scores:
            continue

        top_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]

        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        for i, (user_id, score) in enumerate(top_users):
            try:
                member = await bot.get_chat_member(chat_id, user_id)
                name = member.user.full_name
            except Exception:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        msg = await bot.send_message(chat_id, text, parse_mode="HTML")
        try:
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except Exception:
            pass

        rating[chat_id].clear()


async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        is_admin = member.status in ("administrator", "creator")
    except Exception:
        is_admin = False

    if is_admin:
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")


async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = rating.get(chat_id, {})
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    top = sorted(users.items(), key=lambda x: x[1], reverse=True)[:5]
    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except Exception:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    await update.message.reply_text(text, parse_mode="HTML")


async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating.get(chat_id, {})
    if user_id not in users:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    position = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
    score = users[user_id]
    await update.message.reply_text(
        f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\nüèÖ –ú–µ—Å—Ç–æ: {position}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {score}"
    )


async def cmd_unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        is_admin = member.status in ("administrator", "creator")
    except Exception:
        is_admin = False

    if not is_admin:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if not context.args or len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return

    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    try:
        await context.bot.restrict_chat_member(
            chat_id,
            target_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
            ),
        )
        muted_users[chat_id].discard(target_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))

telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_message))


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
