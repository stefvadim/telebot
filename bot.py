import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict, deque

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

app = FastAPI()

telegram_app = ApplicationBuilder().token(TOKEN).build()

# –î–∞–Ω–Ω—ã–µ
join_times = defaultdict(dict)  # chat_id -> user_id -> datetime –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> count —Å–æ–æ–±—â–µ–Ω–∏–π
last_week_winners = defaultdict(list)  # chat_id -> list —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
message_times = defaultdict(lambda: defaultdict(deque))  # chat_id -> user_id -> deque —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
muted_users = defaultdict(set)  # chat_id -> set user_id (–∑–∞–º—É—á–µ–Ω—ã)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SPAM_LIMIT = 3  # —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥
MUTE_TIME = 60 * 60  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    for member in update.message.new_chat_members:
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        msg = await update.effective_chat.send_message(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "–í –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML",
        )
        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            await msg.delete()
        except Exception:
            pass


async def check_media_restriction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    # –ê–¥–º–∏–Ω—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        if member.status in ("administrator", "creator"):
            return
    except Exception:
        pass

    if user_id in join_times[chat_id]:
        if datetime.utcnow() - join_times[chat_id][user_id] < timedelta(hours=24):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏
            if msg.photo or msg.video or any(
                e.type in ["url", "text_link"] for e in (msg.entities or [])
            ):
                try:
                    await msg.delete()
                    warn = await update.effective_chat.send_message(
                        f"{user.mention_html()}, –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞!",
                        parse_mode="HTML",
                        reply_to_message_id=msg.message_id,
                    )
                    await asyncio.sleep(10)
                    await warn.delete()
                except Exception:
                    pass


async def check_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    # –ê–¥–º–∏–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        if member.status in ("administrator", "creator"):
            return
    except Exception:
        pass

    now = datetime.utcnow()
    times = message_times[chat_id][user_id]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ SPAM_INTERVAL —Å–µ–∫—É–Ω–¥
    while times and (now - times[0]).total_seconds() > SPAM_INTERVAL:
        times.popleft()
    times.append(now)

    if len(times) > SPAM_LIMIT:
        # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —á–∞—Å
        if user_id not in muted_users[chat_id]:
            try:
                await context.bot.restrict_chat_member(
                    chat_id,
                    user_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=now + timedelta(seconds=MUTE_TIME),
                )
                muted_users[chat_id].add(user_id)
                warn = await update.effective_chat.send_message(
                    f"{user.mention_html()}, –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –í—ã –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ 1 —á–∞—Å.",
                    parse_mode="HTML",
                )
                await asyncio.sleep(10)
                await warn.delete()
            except Exception:
                pass


async def count_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.text is None:
        return
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    # –ê–¥–º–∏–Ω—ã –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        if member.status in ("administrator", "creator"):
            return
    except Exception:
        pass

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω, –Ω–µ —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in muted_users[chat_id]:
        return

    rating[chat_id][user_id] += 1


async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        if not scores:
            continue
        top_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        last_week_winners[chat_id] = top_users

        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]

        for i, (user_id, score) in enumerate(top_users):
            try:
                member = await bot.get_chat_member(chat_id, user_id)
                name = member.user.full_name
            except Exception:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        msg = await bot.send_message(chat_id, text, parse_mode="HTML")
        try:
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except Exception:
            pass
        rating[chat_id].clear()


async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    try:
        member = await context.bot.get_chat_member(chat_id, user.id)
        if member.status in ("administrator", "creator"):
            await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
        else:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤.")


async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = rating.get(chat_id, {})
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    top = sorted(users.items(), key=lambda x: x[1], reverse=True)[:5]
    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except Exception:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    await update.message.reply_text(text, parse_mode="HTML")


async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating.get(chat_id, {})
    if user_id not in users:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    position = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
    score = users[user_id]
    await update.message.reply_text(
        f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\nüèÖ –ú–µ—Å—Ç–æ: {position}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {score}"
    )


async def cmd_unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        if member.status not in ("administrator", "creator"):
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤.")
        return

    # –†–∞–∑–º—É—Ç–∏–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ —Å–µ–±—è (–µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    args = context.args
    if args:
        try:
            target_user_id = int(args[0])
        except Exception:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º—É—Ç—ã.")
        return

    if target_user_id in muted_users[chat_id]:
        try:
            await context.bot.restrict_chat_member(
                chat_id,
                target_user_id,
                permissions=ChatPermissions(can_send_messages=True, can_send_media_messages=True,
                                            can_send_polls=True, can_send_other_messages=True,
                                            can_add_web_page_previews=True, can_change_info=True,
                                            can_invite_users=True, can_pin_messages=True),
                until_date=0,
            )
            muted_users[chat_id].remove(target_user_id)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–º—É—á–µ–Ω.")
        except Exception:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, check_media_restriction))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_spam))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, count_message))

# Webhook endpoint
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()

    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()

    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
