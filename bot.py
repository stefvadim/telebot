import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions, ChatMember, ChatMemberOwner
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

# === Telegram App ===
telegram_app = ApplicationBuilder().token(TOKEN).build()

# === FastAPI App ===
app = FastAPI()

# === –î–∞–Ω–Ω—ã–µ ===
join_times = defaultdict(dict)  # chat_id -> user_id -> join_time
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> score
message_times = defaultdict(lambda: defaultdict(list))  # chat_id -> user_id -> [timestamps]
muted_users = defaultdict(set)  # chat_id -> set of muted user_ids
last_week_winners = defaultdict(list)  # chat_id -> [(user_id, score)]

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        chat_id = update.effective_chat.id
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "üö´ –í –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML"
        )
        await asyncio.sleep(10)
        await msg.delete()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
async def is_owner(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    member = await context.bot.get_chat_member(chat_id, user_id)
    return isinstance(member, ChatMemberOwner)

# === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ + –∞–Ω—Ç–∏—Å–ø–∞–º + —Ä–µ–π—Ç–∏–Ω–≥ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    msg = update.message

    member = await context.bot.get_chat_member(chat_id, user_id)
    is_admin = member.status in ["administrator", "creator"]

    now = datetime.utcnow()

    # üîá –ê–Ω—Ç–∏—Å–ø–∞–º (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    if not is_admin:
        timestamps = message_times[chat_id][user_id]
        timestamps = [t for t in timestamps if now - t < timedelta(minutes=1)]
        timestamps.append(now)
        message_times[chat_id][user_id] = timestamps

        if len(timestamps) > 3 and user_id not in muted_users[chat_id]:
            muted_users[chat_id].add(user_id)
            await context.bot.restrict_chat_member(
                chat_id, user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=now + timedelta(hours=1)
            )
            await msg.reply_text("üö´ –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú—É—Ç –Ω–∞ 1 —á–∞—Å.")
            return

    # üö´ –ó–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞/—Å—Å—ã–ª–æ–∫ –Ω–æ–≤—ã–º —é–∑–µ—Ä–∞–º
    if user_id in join_times[chat_id]:
        if now - join_times[chat_id][user_id] < timedelta(hours=24):
            if msg.photo or msg.video or any(e.type in ["url", "text_link"] for e in msg.entities or []):
                try:
                    await msg.delete()
                    warn = await update.effective_chat.send_message(
                        f"{update.effective_user.mention_html()}, –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞!",
                        parse_mode="HTML"
                    )
                    await asyncio.sleep(5)
                    await warn.delete()
                except:
                    pass
                return

    # üìà –ü–æ–¥—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    if msg.text and not msg.text.startswith("/"):
        rating[chat_id][user_id] += 1

# === –ö–æ–º–∞–Ω–¥—ã /top –∏ /myrank ===
async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = rating.get(chat_id, {})
    if not users:
        reply = await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await asyncio.sleep(3)
        await update.message.delete()
        await reply.delete()
        return

    top = sorted(users.items(), key=lambda x: x[1], reverse=True)[:5]
    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    reply = await update.message.reply_text(text, parse_mode="HTML")
    await asyncio.sleep(3)
    await update.message.delete()
    await reply.delete()

async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating.get(chat_id, {})
    if user_id not in users:
        reply = await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await asyncio.sleep(3)
        await update.message.delete()
        await reply.delete()
        return

    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    position = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
    score = users[user_id]
    reply = await update.message.reply_text(
        f"üèÖ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:\n–ú–µ—Å—Ç–æ: {position}\n–°–æ–æ–±—â–µ–Ω–∏–π: {score}"
    )
    await asyncio.sleep(3)
    await update.message.delete()
    await reply.delete()

# === –ö–æ–º–∞–Ω–¥–∞ /unmute ‚Äî —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü ===
async def is_owner(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    member = await context.bot.get_chat_member(chat_id, user_id)
    return member.status == "creator"

    if not await is_owner(context, chat_id, user_id):
        await update.message.reply_text("üîí –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return

    target_id = int(context.args[0])
    muted_users[chat_id].discard(target_id)
    try:
        await context.bot.restrict_chat_member(
            chat_id, target_id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# === /id ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ===
async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    member = await context.bot.get_chat_member(chat_id, user_id)

    if member.status not in ["administrator", "creator"]:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")

# === –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã ===
async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        top_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        last_week_winners[chat_id] = top_users

        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        for i, (user_id, score) in enumerate(top_users):
            try:
                member = await bot.get_chat_member(chat_id, user_id)
                name = member.user.full_name
            except:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        try:
            msg = await bot.send_message(chat_id, text, parse_mode="HTML")
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except:
            pass
        rating[chat_id].clear()

# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))
telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
