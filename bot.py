import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict, deque

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatMember, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

# === Telegram Application ===
telegram_app = ApplicationBuilder().token(TOKEN).build()

# === FastAPI app ===
app = FastAPI()

# === –î–∞–Ω–Ω—ã–µ ===
join_times = defaultdict(dict)  # chat_id -> user_id -> join_time (datetime)
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> score
last_week_winners = defaultdict(list)  # chat_id -> [(user_id, score)]
message_timestamps = defaultdict(lambda: defaultdict(deque))  # chat_id -> user_id -> deque of message timestamps
muted_users = defaultdict(set)  # chat_id -> set of muted user_ids


# === –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ===
async def is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except:
        return False


# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    for member in update.message.new_chat_members:
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "üö´ –í –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML",
        )
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É–¥–∞–ª–∏–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await msg.delete()


# === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–µ–¥–∏–∞/—Å—Å—ã–ª–∫–∏ –∏ –∞–Ω—Ç–∏—Å–ø–∞–º + –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def media_restrict_and_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    msg = update.message

    if msg is None:
        return

    # –ê–¥–º–∏–Ω—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
    if await is_admin(chat_id, user_id, context):
        return

    now = datetime.utcnow()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º—É—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in muted_users[chat_id]:
        try:
            await msg.delete()
        except:
            pass
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö

    # –ó–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–æ–∫ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞
    if user_id in join_times[chat_id]:
        if now - join_times[chat_id][user_id] < timedelta(hours=24):
            if (
                msg.photo or msg.video or msg.animation or msg.document
                or any(e.type in ["url", "text_link"] for e in msg.entities or [])
            ):
                try:
                    await msg.delete()
                    warning = await update.effective_chat.send_message(
                        f"{update.effective_user.mention_html()}, –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏!",
                        parse_mode="HTML",
                        reply_to_message_id=msg.message_id,
                    )
                    await asyncio.sleep(3)
                    await warning.delete()
                except:
                    pass
                return  # –ù–µ —Å—á–∏—Ç–∞–µ–º —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ –±–æ–ª–µ–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
    timestamps = message_timestamps[chat_id][user_id]
    timestamps.append(now)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º—Å—Ç–∞–º–ø—ã (> 60 —Å–µ–∫)
    while timestamps and (now - timestamps[0]) > timedelta(seconds=60):
        timestamps.popleft()

    if len(timestamps) > 3:
        # –ú—É—Ç –Ω–∞ 1 —á–∞—Å
        try:
            until = now + timedelta(hours=1)
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until,
            )
            muted_users[chat_id].add(user_id)
            warn_msg = await update.effective_chat.send_message(
                f"{update.effective_user.mention_html()}, –≤—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –Ω–∞ 1 —á–∞—Å –∑–∞ —Å–ø–∞–º.",
                parse_mode="HTML",
                reply_to_message_id=msg.message_id,
            )
            await asyncio.sleep(3)
            await warn_msg.delete()
        except:
            pass
        try:
            await msg.delete()
        except:
            pass
        # –û—á–∏—Å—Ç–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –º—É—Ç–∞
        message_timestamps[chat_id][user_id].clear()
        return

    # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥)
    if msg.text and not msg.text.startswith("/"):
        rating[chat_id][user_id] += 1


# === –ö–æ–º–∞–Ω–¥–∞ /id ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ===
async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not await is_admin(chat_id, user_id, context):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")


# === –ö–æ–º–∞–Ω–¥–∞ /top ‚Äî —Ç–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º ===
async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = rating.get(chat_id, {})
    if not users:
        msg = await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await asyncio.sleep(3)
        await msg.delete()
        await update.message.delete()
        return

    top = sorted(users.items(), key=lambda x: x[1], reverse=True)[:5]
    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    msg = await update.message.reply_text(text, parse_mode="HTML")
    await asyncio.sleep(3)
    await msg.delete()
    await update.message.delete()


# === –ö–æ–º–∞–Ω–¥–∞ /myrank ‚Äî –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º ===
async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating.get(chat_id, {})
    if user_id not in users:
        msg = await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        await asyncio.sleep(3)
        await msg.delete()
        await update.message.delete()
        return
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    position = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
    score = users[user_id]

    text = f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\nüèÖ –ú–µ—Å—Ç–æ: {position}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {score}"
    msg = await update.message.reply_text(text)
    await asyncio.sleep(3)
    await msg.delete()
    await update.message.delete()


# === –ö–æ–º–∞–Ω–¥–∞ /unmute <user_id> –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ ===
async def cmd_unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not await is_admin(chat_id, user_id, context):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if not context.args or len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return

    target_id = int(context.args[0])

    try:
        await context.bot.restrict_chat_member(
            chat_id,
            target_id,
            permissions=ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
        )
        muted_users[chat_id].discard(target_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


# === –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º ===
async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        if not scores:
            continue
        top_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        last_week_winners[chat_id] = top_users

        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        for i, (user_id, score) in enumerate(top_users):
            try:
                member = await bot.get_chat_member(chat_id, user_id)
                name = member.user.full_name
            except:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        try:
            msg = await bot.send_message(chat_id, text, parse_mode="HTML")
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except:
            pass
        rating[chat_id].clear()


# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))
telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, media_restrict_and_count))


# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


# === –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI ===
@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()

    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
