import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions, ChatMember
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

telegram_app = ApplicationBuilder().token(TOKEN).build()
app = FastAPI()

# === –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö ===
join_times = defaultdict(dict)  # chat_id -> user_id -> datetime
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> score
message_log = defaultdict(lambda: defaultdict(list))  # chat_id -> user_id -> [datetime]
muted_users = defaultdict(set)  # chat_id -> set(user_id)
last_week_winners = defaultdict(list)

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        chat_id = update.effective_chat.id
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "üö´ –ü–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML"
        )
        await asyncio.sleep(3)
        await msg.delete()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
async def is_admin(bot, chat_id, user_id):
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except:
        return False

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    now = datetime.utcnow()
    msg = update.message

    if not msg:
        return

    # –ü—Ä–æ–ø—É—Å–∫ –∞–¥–º–∏–Ω–æ–≤
    if await is_admin(context.bot, chat_id, user_id):
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º—É—Ç–µ ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in muted_users[chat_id]:
        try:
            await msg.delete()
        except:
            pass
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–∏—á–∫–∞ –Ω–∞ –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏
    joined_at = join_times[chat_id].get(user_id)
    if joined_at and now - joined_at < timedelta(hours=24):
        if msg.photo or msg.video or msg.document or msg.audio or msg.video_note or msg.animation or \
           any(e.type in ["url", "text_link"] for e in msg.entities or []):
            try:
                await msg.delete()
                warn = await msg.reply_text(
                    f"{msg.from_user.mention_html()}, –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞!",
                    parse_mode="HTML"
                )
                await asyncio.sleep(3)
                await warn.delete()
            except:
                pass
            return

    # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–ª—É–¥ –∏–ª–∏ –Ω–µ—Ç)
    rating[chat_id][user_id] += 1

    # === –ê–Ω—Ç–∏—Å–ø–∞–º: 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç—É ===
    message_log[chat_id][user_id] = [
        t for t in message_log[chat_id][user_id] if (now - t).total_seconds() < 60
    ]
    message_log[chat_id][user_id].append(now)

    if len(message_log[chat_id][user_id]) > 3:
        muted_users[chat_id].add(user_id)
        try:
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=int((now + timedelta(hours=1)).timestamp())
            )
            warn = await msg.reply_text(
                f"üîá {msg.from_user.mention_html()} –∑–∞–º—å—é—á–µ–Ω –∑–∞ —Ñ–ª—É–¥ –Ω–∞ 1 —á–∞—Å.",
                parse_mode="HTML"
            )
            await asyncio.sleep(3)
            await warn.delete()
        except:
            pass

# === /top ===
async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    top = sorted(rating[chat_id].items(), key=lambda x: x[1], reverse=True)[:5]

    if not top:
        await delete_reply(update, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await delete_reply(update, text, parse_mode="HTML")

# === /myrank ===
async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating[chat_id]

    if user_id not in users:
        await delete_reply(update, "–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    rank = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
    score = users[user_id]
    await delete_reply(update, f"üèÖ –í–∞—à–µ –º–µ—Å—Ç–æ: {rank}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {score}")

# === /id (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) ===
async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not await is_admin(context.bot, chat_id, user_id):
        return

    await update.message.reply_text(f"üÜî Chat ID: {chat_id}")

# === /unmute <user_id> (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) ===
async def cmd_unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    sender_id = update.effective_user.id

    if not await is_admin(context.bot, chat_id, sender_id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return

    try:
        user_id = int(context.args[0])
        muted_users[chat_id].discard(user_id)
        await context.bot.restrict_chat_member(
            chat_id,
            user_id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === –£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã ===
async def delete_reply(update: Update, text: str, parse_mode=None):
    try:
        msg = await update.message.reply_text(text, parse_mode=parse_mode)
        await asyncio.sleep(3)
        await update.message.delete()
        await msg.delete()
    except:
        pass

# === –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ ===
async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        top = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        last_week_winners[chat_id] = top
        rating[chat_id].clear()

        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        for i, (uid, score) in enumerate(top):
            try:
                member = await bot.get_chat_member(chat_id, uid)
                name = member.user.full_name
            except:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        try:
            msg = await bot.send_message(chat_id, text, parse_mode="HTML")
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except:
            pass

# === Handlers ===
telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))

# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
