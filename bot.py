import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict, deque

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatMember, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

# === Telegram Application ===
telegram_app = ApplicationBuilder().token(TOKEN).build()

# === FastAPI app ===
app = FastAPI()

# === –î–∞–Ω–Ω—ã–µ ===
join_times = defaultdict(dict)  # chat_id -> user_id -> join_time
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> score
last_week_winners = defaultdict(list)  # chat_id -> [(user_id, score)]
muted_users = defaultdict(set)  # chat_id -> set(user_id)
user_message_times = defaultdict(lambda: defaultdict(deque))  # chat_id -> user_id -> deque of timestamps

MAX_MSG_PER_MINUTE = 3
MUTE_DURATION = timedelta(hours=1)


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞/–≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
async def is_admin(bot, chat_id, user_id) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMember.ADMINISTRATOR, ChatMember.CREATOR]
    except:
        return False


# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        chat_id = update.effective_chat.id
        user_id = member.id
        join_times[chat_id][user_id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "–í –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML",
        )
        await asyncio.sleep(10)
        try:
            await msg.delete()
        except:
            pass


# === –ê–Ω—Ç–∏—Å–ø–∞–º –∏ –∑–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ ===
async def anti_spam_and_media_restrict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    msg = update.message

    # –ê–¥–º–∏–Ω—ã –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è
    if await is_admin(context.bot, chat_id, user_id):
        if msg.text and not msg.text.startswith("/"):
            rating[chat_id][user_id] += 1
        return

    # –ï—Å–ª–∏ –≤ –º—É—Ç–µ ‚Äî —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in muted_users[chat_id]:
        try:
            await msg.delete()
        except:
            pass
        return

    now = datetime.utcnow()

    # –ó–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–æ–∫ –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
    join_time = join_times[chat_id].get(user_id)
    if join_time and (now - join_time < timedelta(hours=24)):
        has_media = msg.photo or msg.video
        has_link = any(
            e.type in ["url", "text_link"] for e in (msg.entities or [])
        )
        if has_media or has_link:
            try:
                await msg.delete()
                warn = await update.effective_chat.send_message(
                    f"{update.effective_user.mention_html()}, –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞!",
                    parse_mode="HTML",
                    reply_to_message_id=msg.message_id,
                )
                await asyncio.sleep(3)
                await warn.delete()
            except:
                pass
            return  # –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ –±–æ–ª–µ–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
    times = user_message_times[chat_id][user_id]
    times.append(now)
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
    while times and now - times[0] > timedelta(minutes=1):
        times.popleft()

    if len(times) > MAX_MSG_PER_MINUTE:
        muted_users[chat_id].add(user_id)
        try:
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=int((now + MUTE_DURATION).timestamp()),
            )
            warn = await update.effective_chat.send_message(
                f"{update.effective_user.mention_html()} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –∑–∞ —Ñ–ª—É–¥ –Ω–∞ 1 —á–∞—Å.",
                parse_mode="HTML",
            )
            await asyncio.sleep(5)
            await warn.delete()
        except:
            pass
        return  # –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–¥—Å—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –Ω–µ –∫–æ–º–∞–Ω–¥)
    if msg.text and not msg.text.startswith("/"):
        rating[chat_id][user_id] += 1


# === –ö–æ–º–∞–Ω–¥–∞ /id ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not await is_admin(context.bot, chat_id, user_id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")


# === –ö–æ–º–∞–Ω–¥–∞ /unmute ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
async def cmd_unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    sender_id = update.effective_user.id

    if not await is_admin(context.bot, chat_id, sender_id):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return

    try:
        user_id = int(context.args[0])
        if user_id in muted_users[chat_id]:
            muted_users[chat_id].remove(user_id)
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                    can_change_info=False,
                    can_invite_users=True,
                    can_pin_messages=False,
                ),
                until_date=0,
            )
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—å—é—á–µ–Ω.")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


# === –ö–æ–º–∞–Ω–¥–∞ /top ‚Äî —Ç–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = rating.get(chat_id, {})
    if not users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    top = sorted(users.items(), key=lambda x: x[1], reverse=True)[:5]
    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    msg = await update.message.reply_text(text, parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)
    try:
        await update.message.delete()
        await msg.delete()
    except:
        pass


# === –ö–æ–º–∞–Ω–¥–∞ /myrank ‚Äî –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating.get(chat_id, {})
    if user_id not in users:
        msg = await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    else:
        sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
        position = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
        score = users[user_id]
        msg = await update.message.reply_text(
            f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\nüèÖ –ú–µ—Å—Ç–æ: {position}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {score}"
        )

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)
    try:
        await update.message.delete()
        await msg.delete()
    except:
        pass


# === –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ===
async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        top_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        last_week_winners[chat_id] = top_users

        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        for i, (user_id, score) in enumerate(top_users):
            try:
                member = await bot.get_chat_member(chat_id, user_id)
                name = member.user.full_name
            except:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        try:
            msg = await bot.send_message(chat_id, text, parse_mode="HTML")
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except:
            pass
        rating[chat_id].clear()


# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, anti_spam_and_media_restrict))


# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}


# === –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI ===
@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()

    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=8000)
