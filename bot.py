import os
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict

from fastapi import FastAPI, Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

telegram_app = ApplicationBuilder().token(TOKEN).build()
app = FastAPI()

# === –•—Ä–∞–Ω–∏–ª–∏—â–∞ ===
join_times = defaultdict(dict)  # chat_id -> user_id -> datetime
rating = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> score
last_messages = defaultdict(lambda: defaultdict(list))  # chat_id -> user_id -> [timestamps]
muted_users = defaultdict(set)  # chat_id -> set(user_ids)

# === –£—Ç–∏–ª–∏—Ç—ã ===
async def is_owner(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    member = await context.bot.get_chat_member(chat_id, user_id)
    return member.status == "creator"

async def is_admin(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    member = await context.bot.get_chat_member(chat_id, user_id)
    return member.status in ["administrator", "creator"]

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö ===
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        chat_id = update.effective_chat.id
        join_times[chat_id][member.id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention_html()}!\n"
            "–í —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 24 —á–∞—Å–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω—ã —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML",
        )
        await asyncio.sleep(10)
        await msg.delete()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –∞–Ω—Ç–∏—Å–ø–∞–º, —Ä–µ–π—Ç–∏–Ω–≥, –∑–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    msg = update.message

    # –ê–¥–º–∏–Ω–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    if await is_admin(context, chat_id, user_id):
        return

    now = datetime.utcnow()

    # === –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ –±–æ–ª–µ–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É ===
    timestamps = last_messages[chat_id][user_id]
    timestamps.append(now)
    last_messages[chat_id][user_id] = [t for t in timestamps if now - t < timedelta(minutes=1)]

    if len(last_messages[chat_id][user_id]) > 3:
        try:
            await context.bot.restrict_chat_member(
                chat_id,
                user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=now + timedelta(hours=1)
            )
            muted_users[chat_id].add(user_id)
            await msg.reply_text("üîá –í—ã –±—ã–ª–∏ –∑–∞–º—É—á–µ–Ω—ã –∑–∞ —Å–ø–∞–º –Ω–∞ 1 —á–∞—Å.")
        except:
            pass
        return

    # === –ó–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö ===
    if user_id in join_times[chat_id]:
        if now - join_times[chat_id][user_id] < timedelta(hours=24):
            if msg.photo or msg.video or any(e.type in ["url", "text_link"] for e in msg.entities or []):
                try:
                    await msg.delete()
                    await msg.reply_text(
                        "üö´ –ú–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞.",
                        quote=True
                    )
                except:
                    pass
                return

    # === –ü–æ–¥—Å—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ ===
    if msg.text and not msg.text.startswith("/"):
        rating[chat_id][user_id] += 1

# === /top –∫–æ–º–∞–Ω–¥–∞ ===
async def cmd_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    users = rating.get(chat_id, {})
    if not users:
        await auto_delete_reply(update, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    top = sorted(users.items(), key=lambda x: x[1], reverse=True)[:5]
    medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
    text = "<b>üìä –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (uid, score) in enumerate(top):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = member.user.full_name
        except:
            name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await auto_delete_reply(update, text, parse_mode="HTML")

# === /myrank –∫–æ–º–∞–Ω–¥–∞ ===
async def cmd_myrank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    users = rating.get(chat_id, {})
    if user_id not in users:
        await auto_delete_reply(update, "–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
    position = next((i + 1 for i, (uid, _) in enumerate(sorted_users) if uid == user_id), None)
    score = users[user_id]
    await auto_delete_reply(update, f"üèÖ –í–∞—à–µ –º–µ—Å—Ç–æ: {position}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {score}")

# === /id ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ===
async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_admin(context, update.effective_chat.id, update.effective_user.id):
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {update.effective_chat.id}")
    else:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

# === /unmute ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ===
async def cmd_unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    from_user = update.effective_user

    if not await is_owner(context, chat_id, from_user.id):
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unmute <user_id>")
        return

    try:
        target_id = int(context.args[0])
        await context.bot.restrict_chat_member(
            chat_id,
            target_id,
            permissions=ChatPermissions(can_send_messages=True)
        )
        muted_users[chat_id].discard(target_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# === –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã) ===
async def auto_delete_reply(update: Update, text: str, parse_mode=None):
    msg = await update.message.reply_text(text, parse_mode=parse_mode)
    await asyncio.sleep(3)
    await update.message.delete()
    await msg.delete()

# === –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ ===
async def weekly_awards(app):
    bot = app.bot
    for chat_id, scores in rating.items():
        top_users = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        medals = ["ü•á", "ü•à", "ü•â", "üéñÔ∏è", "üéñÔ∏è"]
        text = "<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:</b>\n\n"
        for i, (uid, score) in enumerate(top_users):
            try:
                member = await bot.get_chat_member(chat_id, uid)
                name = member.user.full_name
            except:
                name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"{medals[i]} {name} ‚Äî {score} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        try:
            msg = await bot.send_message(chat_id, text, parse_mode="HTML")
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except:
            pass
        rating[chat_id].clear()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@app.on_event("startup")
async def on_startup():
    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(WEBHOOK_URL)
    await telegram_app.start()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(weekly_awards, "cron", day_of_week="mon", hour=0, minute=0, args=[telegram_app])
    scheduler.start()
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
telegram_app.add_handler(CommandHandler("top", cmd_top))
telegram_app.add_handler(CommandHandler("myrank", cmd_myrank))
telegram_app.add_handler(CommandHandler("id", cmd_id))
telegram_app.add_handler(CommandHandler("unmute", cmd_unmute))
telegram_app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
