import asyncio
from datetime import datetime, timedelta
from collections import defaultdict, deque

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters
)

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–û–¢–°–Æ–î–ê"
SPAM_LIMIT = 3  # —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥
MUTE_DURATION = 3600  # —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
join_times = defaultdict(dict)        # chat_id -> user_id -> join_datetime
message_count = defaultdict(lambda: defaultdict(int))  # chat_id -> user_id -> count
user_spam = defaultdict(lambda: defaultdict(deque))    # chat_id -> user_id -> deque of timestamps
muted_until = defaultdict(dict)       # chat_id -> user_id -> mute_deadline
weekly_winners = defaultdict(list)    # chat_id -> last week's winners


# –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü?
async def is_admin(chat_id, user_id, bot):
    try:
        m = await bot.get_chat_member(chat_id, user_id)
        return m.status in ("administrator", "creator")
    except:
        return False


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∑–∞–ø—Ä–µ—Ç –º–µ–¥–∏–∞/—Å—Å—ã–ª–æ–∫
async def welcome(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    for u in update.message.new_chat_members:
        join_times[update.effective_chat.id][u.id] = datetime.utcnow()
        msg = await update.effective_chat.send_message(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {u.mention_html()}!\n–í –ø–µ—Ä–≤—ã–µ 24‚ÄØ—á –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏.",
            parse_mode="HTML"
        )
        await asyncio.sleep(5)
        await msg.delete()


async def check_new_restrictions(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    user_id = user.id

    if user_id in join_times[chat_id]:
        if datetime.utcnow() - join_times[chat_id][user_id] < timedelta(hours=24):
            m = update.message
            if m.photo or m.video or any(e.type in ("url", "text_link") for e in (m.entities or [])):
                try:
                    await m.delete()
                    msg = await update.effective_chat.send_message(
                        f"{user.mention_html()}, –Ω–µ–ª—å–∑—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–≤—ã–µ 24‚ÄØ—á!",
                        parse_mode="HTML",
                        reply_to_message_id=m.message_id
                    )
                    await asyncio.sleep(3)
                    await msg.delete()
                except: pass


# –ü–æ–¥—Å—á–µ—Ç + –∞–Ω—Ç–∏—Å–ø–∞–º + mute
async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    m = update.message
    if not m or m.text and m.text.startswith("/"):
        return

    chat_id = update.effective_chat.id
    user = update.effective_user
    uid = user.id
    bot = ctx.bot

    # –ê–¥–º–∏–Ω –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
    if await is_admin(chat_id, uid, bot):
        message_count[chat_id][uid] += 1
        return

    now = datetime.utcnow()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º mute
    until = muted_until[chat_id].get(uid)
    if until and now < until:
        try:
            await m.delete()
        except: pass
        return  # –∏–≥–Ω–æ—Ä–∏–º

    # –ê–Ω—Ç–∏—Å–ø–∞–º: track timestamps
    dq = user_spam[chat_id][uid]
    dq.append(now)
    while dq and (now - dq[0]).total_seconds() > SPAM_INTERVAL:
        dq.popleft()

    if len(dq) > SPAM_LIMIT:
        # –º—É—Ç–∏–º –Ω–∞ —á–∞—Å
        muted_until[chat_id][uid] = now + timedelta(seconds=MUTE_DURATION)
        user_spam[chat_id][uid].clear()
        await ctx.bot.restrict_chat_member(
            chat_id, uid,
            permissions=...  # –∑–¥–µ—Å—å —É–∫–∞–∑–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        )
        await ctx.bot.send_message(chat_id, f"{user.mention_html()} –∑–∞–º—å—é—á–µ–Ω –∑–∞ —Å–ø–∞–º –Ω–∞ —á–∞—Å", parse_mode="HTML")
        return

    # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    message_count[chat_id][uid] += 1


# –ö–æ–º–∞–Ω–¥–∞ /top
async def cmd_top(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    top5 = sorted(message_count[chat_id].items(), key=lambda x: x[1], reverse=True)[:5]
    if not top5:
        return await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    txt = "üìä –¢–µ–∫—É—â–∏–π —Ç–æ–ø-5:\n"
    medals = ["ü•á","ü•à","ü•â","üéñÔ∏è","üéñÔ∏è"]
    for i,(uid,cnt) in enumerate(top5):
        name = (await ctx.bot.get_chat_member(chat_id, uid)).user.full_name
        txt += f"{medals[i]} {name} ‚Äî {cnt}\n"
    msg = await update.message.reply_text(txt)
    await asyncio.sleep(3); await msg.delete()
    await asyncio.sleep(3); await update.message.delete()


# –ö–æ–º–∞–Ω–¥–∞ /myrank
async def cmd_myrank(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    ranklist = sorted(message_count[chat_id].items(), key=lambda x: x[1], reverse=True)
    if uid not in dict(ranklist):
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
    position = next(i+1 for i,(u,_) in enumerate(ranklist) if u==uid)
    score = message_count[chat_id][uid]
    msg = await update.message.reply_text(f"–í–∞—à —Ä–∞–Ω–≥: {position}, —Å–æ–æ–±—â–µ–Ω–∏–π: {score}")
    await asyncio.sleep(3); await msg.delete()
    await asyncio.sleep(3); await update.message.delete()


# /id –∏ /unmute —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def cmd_id(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    if not await is_admin(chat_id, uid, ctx.bot):
        return
    await update.message.reply_text(f"Chat ID = {chat_id}")

async def cmd_unmute(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    uid_from = update.effective_user.id
    if not await is_admin(chat_id, uid_from, ctx.bot):
        return
    parts = update.message.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return await update.message.reply_text("Usage: /unmute <user_id>")
    uid = int(parts[1])
    if uid in muted_until[chat_id]:
        muted_until[chat_id].pop(uid, None)
        await ctx.bot.restrict_chat_member(
            chat_id, uid,
            permissions=None  # –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–∞–≤–∞
        )
        await update.message.reply_text(f"User {uid} —Ä–∞–∑–º—å—é—á–µ–Ω.")


# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
async def weekly_report(app):
    for chat_id, scores in message_count.items():
        leaderboard = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:5]
        if not leaderboard: continue
        txt = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ–¥–µ–ª–∏:\n"
        medals = ["ü•á","ü•à","ü•â","üéñÔ∏è","üéñÔ∏è"]
        for i,(uid,cnt) in enumerate(leaderboard):
            name=(await app.bot.get_chat_member(chat_id,uid)).user.full_name
            txt+= f"{medals[i]} {name} ‚Äî {cnt}\n"
        msg=await app.bot.send_message(chat_id, txt)
        await app.bot.pin_chat_message(chat_id, msg.message_id)
    message_count.clear()


async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # Handler order: important!
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, check_new_restrictions))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, message_handler))

    app.add_handler(CommandHandler("top", cmd_top))
    app.add_handler(CommandHandler("myrank", cmd_myrank))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("unmute", cmd_unmute))

    from apscheduler.schedulers.asyncio import AsyncIOScheduler
    sched = AsyncIOScheduler()
    sched.add_job(weekly_report, "cron", day_of_week="mon", hour=0, minute=0, args=[app])
    sched.start()

    await app.run_polling()

if __name__=="__main__":
    asyncio.run(main())
